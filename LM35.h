
/*ต้องเริ่มในส่วนของ header ไฟล์
    เพราะในส่วนนี้อย่างที่บอกจะเป็นการกำหนดว่าในไลบรารี่เราจะต้องมี
    function อะไรบ้าง attribute อะไรบ้าง
    อันดับแรกให้เราทำการเช็ค macro ก่อนเลย ว่าภายในไลบรารี่เรามี macro ตัวนี้ไหม 
    ถ้าไม่มีก็ให้ทำการสร้าง macro ขึ้นมาใหม่*/

/*ทำไมต้องเช็ค macro จาก -> ifndef ย่อมาจาก if not define ถ้าเกิดว่ามี macro ตัวนี้อยู่แล้ว 
    โค้ดทั้งหมดของเราก็จะไม่ทำงานไงละ 
    ไว้ป้องกันเรียก ไลบรารี่ ซ้ำซ้อนกัน หรือการสร้าง macro ซ้ำกันต้องดูกันดี ๆ 
    เพราะไลบรารี่ส่วนใหญ่เขาจะเช็คในส่วนนี้กัน*/
#ifndef LM35_H
#define LM35_H
/*อธิบายเพิ่มเติมนิดนึง
               #ifndef LM35_H <- ตัวนี้จำเช็คว่าไม่มี macro ชื่อนี้ใช่ไหม ถ้าไม่มีก็ให้ทำงานบรรทัดต่อไป
               #define LM35_H<- ในส่วนนี้จะทำงานก็ต่อเมื่อมีการเช็คแล้วว่าไม่เคยมี macro ตัวนี้อยู่
               ก็ให้ทำการสร้าง macro ออกมาใหม่ซะ 
**สังเกตุ ถ้าเกิดว่ามี #ifndef แล้วก็อย่าลืมปิดซะละ -> #endif มีเปิดต้องมีปิดนะเออ*/

/*ต่อมาก็ยังอยู่ในส่วนของ preprocessor กันอยู่ ก็คือในส่วนของ #include เราก็จะทำการเพิ่มเข้าไปดังนี้*/
#if ARDUINO >= 100
    #include "Arduino.h"
#else
    #include "WProgram.h"
#endif
/*นี่คือการเช็คเวอร์ชั่นของ Program Arduino เรา 
    เพราะบางเครื่องนั้นยังใช้ตัว IDE  (ก็ตัวโปรแกรม Arduino ที่เราเขียนอะแหล่ะ) 
    version เก่า ๆ อยู่ จึงจะต้องใส่เงื่อนไขนี้เช็คลงไปด้วยเพื่อความยืดหยุ่นในการเรียกใช้งานไลบรารี่จะได้ไม่มีการ
    error เกิดขึ้นระหว่าง compile หรือ burn ข้อมูลลงบอร์ด
**ในส่วนของ #include นี้ไม่เรียกไม่ได้นะ จะเออเร่อนะเออ 
    แต่เจ้าของบล็อกจำไม่ได้ว่าตัวไหน ระหว่าง Arduino.h กับ WProgram.h 
    ส ำหรับ IDE version ใหม่ แต่น่าจะเป็น Arduino.h ที่ใช้สำหรับ version ใหม่ก็ต้องขออภัยด้วย
***UPDATE 5/17/2017 *** ในตอนนี้ถ้าผู้อ่านใช้งาน Arduino IDE Version ใหม่อยู่ 
    ให้เขียนเป็น #include "Arduino.h" ได้เลย 
    ไม่ต้องมีเงื่อนไขตอนเช็คเวอร์ชั่น เพราะ WProgram.h ใน Arduino IDE Version ใหม่จะไม่รู้จักแล้ว*/

/*ส่วนของการกำหนด function และ attribute ต่าง ๆ ในไลบรารี่กันเลยแล้วกัน*/
/*การกำหนด function หรือ attribute ทุกอย่างจะอยู่ภายใต้ class เพื่อจะได้ใช้ได้กับในไฟล์ .cpp ในส่วนของโค้ดนั่นเอง*/
class LM35
{
/*ที่สังเกตุเลยคือมี public: กับ private: มันก็คือ modifier จะกำหนดสิทธิ์ในการเข้าถึง function หรือ attribute ต่าง ๆ 
    มาดูภายใน public: ก็จะมี function  
    สังเกตุดู function แรก ชื่อ function กับชื่อ class จะเหมือนกัน function 
    นี้จะเรียกว่า constructor ยกตัวอย่างการใช้งาน 
        LM35 temp(A0);
    หมายความว่าเมื่อประกาศชื่อตัวแปรของไลบรารี่ก็จะเข้าที่ฟังชั่นนี้เลยเป็นฟังชั่นแรกตั้งแต่ประกาศ 
    ไม่จำเป็นต้องประกาศแล้วค่อยมาเรียกใช้ทีหลัง*/
public:
    LM35(int pin);
    float getTempC();
    float getTempF();
    int getOriginalTemp();
    /*ส่วน function อื่น ๆ ก็จะเหมือนกับการสร้าง function ในไลบรารี่ธรรมดาเพียงแค่ไม่มี body ของ function เท่านั้น*/ 

    /*ในส่วน private: เจ้าของบล็อกก็จะให้เป็นการกำหนด attribute ต่าง ๆ หรือตัวแปรต่าง ๆ ที่จำเป็นต้องใช้งานในไลบรารี่*/
private:
    float tempC;
    float tempF;
    float temp;
    int original;
};

#endif